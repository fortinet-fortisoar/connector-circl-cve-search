""" Copyright start
  Copyright (C) 2008 - 2022 Fortinet Inc.
  All rights reserved.
  FORTINET CONFIDENTIAL & FORTINET PROPRIETARY SOURCE CODE
  Copyright end """
from connectors.core.connector import get_logger, ConnectorError
import json
import requests

logger = get_logger('circl-cve-search')


class CIRCLlu(object):

    def __init__(self, config):
        self.server_url = config.get('server').strip()
        self.protocol = 'http'
        if self.server_url[-1] == '/':
            self.server_url = self.server_url[:-1]
        self.url = '{0}://{1}/api'.format(self.protocol.lower(), self.server_url)
        self.headers = {'accept': 'application/json'}

    def make_rest_call(self, endpoint, method='GET', data=None, headers=None):
        url = self.url + endpoint
        try:
            response = requests.request(method, url, data=json.dumps(data), headers=self.headers)
            if response.status_code in [200]:
                try:
                    response_data = response.json()
                    return {'status': response_data['status'] if 'status' in response_data else 'Success',
                            'data': response_data}
                except Exception as e:
                    response_data = response.content
                    return {'status': 'Failure', 'data': response_data}
            else:
                raise ConnectorError(
                    {'status': 'Failure', 'status_code': str(response.status_code), 'response': response.content})
        except Exception as e:
            logger.exception('{0}'.format(e))
            raise ConnectorError('{0}'.format(e))

    def browse_products(self, params):
        endpoint = '/browse/{0}'.format(params.get('vendor'))
        return self.make_rest_call(endpoint=endpoint)

    def browse_vendors(self, params):
        endpoint = '/browse'
        return self.make_rest_call(endpoint=endpoint)

    def current_cve_dbinfo(self, params):
        endpoint = '/dbinfo'
        return self.make_rest_call(endpoint=endpoint)

    def last_updated_cves(self, params):
        endpoint = '/last'
        return self.make_rest_call(endpoint=endpoint)

    def search_per_id(self, params):
        endpoint = '/cve/{0}'.format(params.get('cve-id'))
        return self.make_rest_call(endpoint=endpoint)

    def search_per_product(self, params):
        endpoint = '/search/{0}/{1}'.format(params.get('vendor'), params.get('product'))
        return self.make_rest_call(endpoint=endpoint)


def _run_operation(config, params):
    operation = params['operation']
    cl_object = CIRCLlu(config)
    command = getattr(CIRCLlu, operation)
    response = command(cl_object, params)
    return response


def _check_health(config):
    try:
        cl_object = CIRCLlu(config)
        endpoint = '/last'
        server_config = cl_object.make_rest_call(endpoint=endpoint)
        if server_config['status'] == 'Failure':
            logger.exception('Configuration Error, Check URL.')
            raise ConnectorError('Configuration Error, Check URL.')
    except Exception as e:
        logger.exception('Health Check Error:{0}'.format(e))
        raise ConnectorError('Health Check Error:{0}'.format(e))
